#!/usr/bin/env node

/**
 * Module dependencies.
 */
const app = require('../app');
const debug = require('debug')('news-react-server:server');
const http = require('http');
const https = require('https');
const fs = require('fs');


/**
 * Create HTTP server.
 */
const port = normalizePort(process.env.PORT || '8080');
app.set('port', port);
const server = http.createServer(app);
server.listen(app.get('port'),()=>{
  console.log('HTTP listening on port:',app.get('port'))
});


/**
 * Create HTTPS server
 */
// const secPort = normalizePort(process.env.SEC_PORT || '8523');
// app.set('secPort', secPort)
// const options ={
//   key: fs.readFileSync(__dirname+'/server.key'),
//   cert: fs.readFileSync(__dirname+'/server.cert')
// };
// const secureServer = https.createServer(options,app);
// secureServer.listen(app.get('secPort'),()=>{
//   console.log('HTTPS listening on port:', app.get('secPort'));
// });
// secureServer.on('error', onError);
// secureServer.on('listening', onListening);



/**
*Set handlers
*/
server.on('error', onError);
server.on('listening', onListening);


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

module.exports.newsFeedServer = app;